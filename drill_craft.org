* craft drill                                                         :craft:
:LOGBOOK:
CLOCK: [2017-11-19 Sun 15:39]--[2017-11-19 Sun 15:58] =>  0:19
CLOCK: [2017-11-18 Sat 19:08]--[2017-11-18 Sat 19:32] =>  0:24
CLOCK: [2017-11-17 Fri 16:04]--[2017-11-17 Fri 16:29] =>  0:25
CLOCK: [2017-11-16 Thu 23:41]--[2017-11-16 Thu 23:53] =>  0:12
CLOCK: [2017-11-15 Wed 17:49]--[2017-11-15 Wed 17:57] =>  0:08
CLOCK: [2017-11-14 Tue 21:54]--[2017-11-14 Tue 22:19] =>  0:25
CLOCK: [2017-11-14 Tue 13:37]--[2017-11-14 Tue 14:02] =>  0:25
CLOCK: [2017-11-13 Mon 21:22]--[2017-11-13 Mon 21:47] =>  0:25
CLOCK: [2017-11-12 Sun 12:31]--[2017-11-12 Sun 12:43] =>  0:12
CLOCK: [2017-11-11 Sat 14:27]--[2017-11-11 Sat 15:01] =>  0:34
CLOCK: [2017-11-10 Fri 12:09]--[2017-11-10 Fri 12:30] =>  0:21
CLOCK: [2017-11-09 Thu 21:43]--[2017-11-09 Thu 22:14] =>  0:31
CLOCK: [2017-11-07 Tue 13:05]--[2017-11-07 Tue 13:43] =>  0:38
CLOCK: [2017-11-05 Sun 12:01]--[2017-11-05 Sun 12:28] =>  0:27
CLOCK: [2017-11-04 Sat 20:49]--[2017-11-04 Sat 21:38] =>  0:49
CLOCK: [2017-11-04 Sat 20:20]--[2017-11-04 Sat 20:45] =>  0:25
CLOCK: [2017-11-04 Sat 19:50]--[2017-11-04 Sat 20:15] =>  0:25
CLOCK: [2017-11-04 Sat 19:18]--[2017-11-04 Sat 19:43] =>  0:25
CLOCK: [2017-11-03 Fri 13:30]--[2017-11-03 Fri 13:55] =>  0:25
CLOCK: [2017-10-29 Sun 21:58]--[2017-10-29 Sun 22:23] =>  0:25
CLOCK: [2017-10-25 Wed 11:00]--[2017-10-25 Wed 11:25] =>  0:25
CLOCK: [2017-10-21 Sat 13:03]--[2017-10-21 Sat 13:10] =>  0:07
CLOCK: [2017-10-19 Thu 15:57]--[2017-10-19 Thu 16:00] =>  0:03
CLOCK: [2017-10-16 Mon 10:26]--[2017-10-16 Mon 10:45] =>  0:19
CLOCK: [2017-10-13 Fri 10:56]--[2017-10-13 Fri 11:20] =>  0:24
CLOCK: [2017-10-12 Thu 19:26]--[2017-10-12 Thu 19:32] =>  0:06
CLOCK: [2017-10-08 Sun 12:27]--[2017-10-08 Sun 12:35] =>  0:08
CLOCK: [2017-10-04 Wed 13:21]--[2017-10-04 Wed 22:00] =>  8:39
CLOCK: [2017-10-04 Wed 12:34]--[2017-10-04 Wed 13:04] =>  0:30
:END:
** INBOX
*** TODO drill law of Andal
  [2017-10-04 Wed]
low of demishing returns
*** TODO drill Alan Kay quote about OOP and messages
  [2017-10-13 Fri]
  [[file:~/Dropbox/org/praca.org::*%5B%5Bhttps://media.pragprog.com/titles/pb7con/Bonus_Chapter.pdf%5D%5B7%20in%207%5D%5D%20bonus%20on%20actors][7 in 7 bonus on actors]]
** Agile Manifesto

While there is value in the items on the right, we value the items on
the left more.

*** Agile Manifesto                                                 :drill:
SCHEDULED: <2017-12-03 Sun>
:PROPERTIES:
:ID:       8cb9208f-4866-4841-bcf3-324dcf92e6d9
:DRILL_CARD_TYPE: twosided
:DRILL_LAST_INTERVAL: 29.5775
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 8
:DRILL_FAILURE_COUNT: 4
:DRILL_AV.RA....UA..TY: 2.333
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 3.204
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2017-11-03 Fri 13:35]
:END:

**** __
*Individuals and interactions*

**** over
processes and tools.

**** craftsmanship
Not only *individuals and interactions* but also *community of
professionals*

*** Agile Manifesto                                                 :drill:
SCHEDULED: <2017-12-14 Thu>
:PROPERTIES:
:ID:       a5591094-bfe7-49e4-9e42-20570eaac95d
:DRILL_CARD_TYPE: twosided
:DRILL_LAST_INTERVAL: 34.1316
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 3.204
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2017-11-10 Fri 12:11]
:END:
**** __
*Working software*
**** over
comprehensive documentation

**** craftsmanship
Not only *working software* but also *well crafted software*

*** Agile Manifesto                                                 :drill:
SCHEDULED: <2017-12-03 Sun>
:PROPERTIES:
:ID:       eaa49b90-10b4-4e95-9baa-016510227096
:DRILL_CARD_TYPE: twosided
:DRILL_LAST_INTERVAL: 24.4339
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 3.0
:DRILL_EASE: 2.456
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2017-11-09 Thu 22:02]
:END:

**** __
*Customer collaboration*

**** over
contract negotiation

**** craftsmanship
Not only *customer collaboration* but also *productive partnership*

*** Agile Manifesto                                                 :drill:
SCHEDULED: <2017-12-11 Mon>
:PROPERTIES:
:ID:       56fa1473-1496-4d48-8fcd-16a2b715d9dc
:DRILL_CARD_TYPE: twosided
:DRILL_LAST_INTERVAL: 31.3024
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.6
:DRILL_EASE: 2.802
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2017-11-10 Fri 12:11]
:END:

**** __
*Responding to change*

**** over
following a plan

**** craftsmanship
Not only *responding to change* but also *steadily adding value*
*** Agile Manifesto                                                 :drill:
SCHEDULED: <2017-11-27 Mon>
:PROPERTIES:
:ID:       2f1ed42f-e626-45d0-a5be-4543557debc5
:DRILL_LAST_INTERVAL: 9.8006
:DRILL_REPEATS_SINCE_FAIL: 3
:DRILL_TOTAL_REPEATS: 3
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 3.0
:DRILL_EASE: 2.456
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2017-11-17 Fri 16:31]
:END:
**** List all four
- *Individuals and interactions* over *processes and tools*
- *Working software* over *comprehensive documentation*.
- *Customer collaboration* over *contract negotiation*.
- *Responding to change* over *following a plan*.
** Software Craftsmanship

*** Software Craftsmanship Manifesto                                :drill:
SCHEDULED: <2017-11-29 Wed>
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:DRILL_LAST_INTERVAL: 25.5907
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.5
:DRILL_EASE: 2.73
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2017-11-03 Fri 13:31]
:ID:       c251bf80-cda1-4c13-9b5a-9cc3b1b88c9d
:END:

**** Not only
working software

**** but also
well crafted software

**** from agile
Working Software over comprehensive documentation

*** Software Craftsmanship Manifesto                                :drill:
SCHEDULED: <2017-11-29 Wed>
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:ID:       265df42b-a815-4bc9-8ca6-1b8c6a8bd966
:DRILL_LAST_INTERVAL: 25.5907
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.5
:DRILL_EASE: 2.73
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2017-11-03 Fri 13:33]
:END:

**** Not only
responding to change

**** but also
steadily adding value

**** from agile
Responding to change over following a plan

*** Software Craftsmanship Manifesto                                :drill:
SCHEDULED: <2017-11-27 Mon>
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:ID:       10baea12-fc98-429b-9ee7-9c435c4146a7
:DRILL_LAST_INTERVAL: 24.486
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.25
:DRILL_EASE: 2.58
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2017-11-03 Fri 13:36]
:END:

**** Not only
individuals and interactions

**** but also
a community of professionals

**** from agile
Individuals and interactions over processes and tools

*** Software Craftsmanship Manifesto                                :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twoside
:ID:       fbb027b5-d1cd-465f-bdad-8da38acbded5
:END:

**** Not only
customer collaboration

**** but also
productive partnerships

**** from agile
Customer collaboration over contract renegotiation

*** Software Craftsmanship Manifesto                                :drill:
SCHEDULED: <2017-11-19 Sun>
:PROPERTIES:
:ID:       df890367-d8ce-4cef-999b-f65458a0ca03
:DRILL_LAST_INTERVAL: 7.2475
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 2.75
:DRILL_EASE: 2.338
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2017-11-12 Sun 13:57]
:END:

**** List all four
- Not only *working software* but also *well crafted software*.
- Not only *responding to change* but also *steadily adding value*.
- Not only *individuals and interactions* but also *community of profesionals*.
- Not only *customer collaboration* but also *productive partnerships*.
** Reactive

*** Reactive Manifesto                                              :drill:
SCHEDULED: <2017-12-01 Fri>
:PROPERTIES:
:ID:       e7135911-f6b1-4fa2-b1eb-6ca9f25d1061
:DRILL_LAST_INTERVAL: 27.7663
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 3.0
:DRILL_EASE: 2.456
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2017-11-03 Fri 13:33]
:END:
Reactive systems are

**** List all goals

 - responsive
 - resilient
 - elastic
 - message driven

**** Diagram


#+BEGIN_EXPORT ascii
                        +----------------+
               +------->|  Responsive    |<------+
               |        +----------------+       |
               |                ^                |
               |                |                |
               |                |                |
       +----------------+       |        +----------------+
       |  Elastic       |<------+------->| Resilient      |
       +----------------+       |        +-------+--------+
               ^                |                ^
               |                |                |
               |        +----------------+       |
               +--------| Message Driven |-------+
                        +----------------+
#+END_EXPORT





*** Reactive Manifesto                                              :drill:
SCHEDULED: <2017-11-22 Wed>
:PROPERTIES:
:ID:       de26c209-ea03-4fcf-a905-7c936d3939de
:DRILL_LAST_INTERVAL: 3.2675
:DRILL_REPEATS_SINCE_FAIL: 2
:DRILL_TOTAL_REPEATS: 19
:DRILL_FAILURE_COUNT: 12
:DRILL_AVERAGE_QUALITY: 2.496
:DRILL_EASE: 2.213
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2017-11-19 Sun 15:54]
:END:
Reactive systems are

**** List all benefits

 - flexible
 - loosely-coupled
 - scalable
 - fault-tolerant

*** Reactive Manifesto                                              :drill:
SCHEDULED: <2017-11-25 Sat>
:PROPERTIES:
:ID:       50d0c2db-4ef0-41d3-9e04-6bc687bb8278
:DRILL_LAST_INTERVAL: 18.8227
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 8
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 2.751
:DRILL_EASE: 2.339
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2017-11-06 Mon 13:11]
:END:
Describe

**** Responsive

**** Short

   - respond fast
   - feature -> usability
   - problems detected quickly

**** Long

The system responds in a timely manner if at all possible.
Responsiveness is the cornerstone of usability and utility, but more
than that, responsiveness means that problems may be detected quickly
and dealt with effectively.  Responsive systems focus on providing
rapid and consistent response times, establishing reliable upper
bounds so they deliver a consistent quality of service.  This
consistent behaviour in turn simplifies error handling, builds end
user confidence, and encourages further interaction.

*** Reactive Manifesto                                              :drill:
SCHEDULED: <2017-11-27 Mon>
:PROPERTIES:
:ID:       a261e838-15df-4648-b788-16fa0bc007cd
:DRILL_LAST_INTERVAL: 9.5934
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 22
:DRILL_FAILURE_COUNT: 11
:DRILL_AVERAGE_QUALITY: 2.528
:DRILL_EASE: 2.23
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2017-11-17 Fri 16:07]
:END:
Describe

**** Resilient

**** Short

 - stays responsive in the face of failure
 - *client* not burdened with handling a failure
 - achieved by
   * *replication*
   * isolation
   * delegation

**** Long
The system stays responsive in the face of failure.  This applies not
only to highly-available, mission critical systems — any system that
is not resilient will be unresponsive after a failure.  Resilience is
achieved by replication, containment, isolation and
delegation. Failures are contained within each component, isolating
components from each other and thereby ensuring that parts of the
system can fail and recover without compromising the system as a
whole.  Recovery of each component is delegated to another (external)
component and high-availability is ensured by replication where
necessary.  The client of a component is not burdened with handling
its failures.

*** Reactive Manifesto                                              :drill:
SCHEDULED: <2017-11-26 Sun>
:PROPERTIES:
:ID:       21e2503a-b163-468f-a4c0-630befdf4376
:DRILL_LAST_INTERVAL: 23.4451
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 12
:DRILL_FAILURE_COUNT: 7
:DRILL_AVERAGE_QUALITY: 2.583
:DRILL_EASE: 2.257
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2017-11-03 Fri 13:36]
:END:
Describe

**** Elastic

**** Short

 - responsive under varying workload
 - react to change
 - *no bottlenecks*
 - *live performance measures*

**** Long
The system stays responsive under varying workload.  Reactive Systems
can react to changes in the input rate by increasing or decreasing the
resources allocated to service these inputs.  This implies designs that
have no contention points or central bottlenecks, resulting in the
ability to shard or replicate components and distribute inputs among
them.  Reactive Systems support predictive, as well as Reactive,
scaling algorithms by providing relevant live performance
measures.  They achieve elasticity in a cost-effective way on commodity
hardware and software platforms.

*** Reactive Manifesto                                              :drill:leech:
:PROPERTIES:
:ID:       cd262b40-dc14-4613-a179-0b8411602103
:DRILL_LAST_INTERVAL: 0.0
:DRILL_REPEATS_SINCE_FAIL: 0
:DRILL_TOTAL_REPEATS: 24
:DRILL_FAILURE_COUNT: 19
:DRILL_AVERAGE_QUALITY: 2.373
:DRILL_EASE: 2.148
:DRILL_LAST_QUALITY: 2
:DRILL_LAST_REVIEWED: [2017-11-16 Thu 23:49]
:END:
Describe

**** Message Driven proprieties

**** Short

 - asynchronous
 - loose coupling
 - isolation
 - location transparency
 - delegation of failure
 - back-pressure

**** Long
Reactive Systems rely on asynchronous message-passing to establish a
boundary between components that ensures loose coupling, isolation and
location transparency.  This boundary also provides the means to
delegate failures as messages.  Employing explicit message-passing
enables load management, elasticity, and flow control by shaping and
monitoring the message queues in the system and applying back-pressure
when necessary.  Location transparent messaging as a means of
communication makes it possible for the management of failure to work
with the same constructs and semantics across a cluster or within a
single host.  Non-blocking communication allows recipients to only
consume resources while active, leading to less system overhead.

*** Reactive glossary                                               :drill:
SCHEDULED: <2017-11-20 Mon>
:PROPERTIES:
:ID:       068cab71-1c18-4648-8b3a-0a50dcab719a
:DRILL_LAST_INTERVAL: 1.632
:DRILL_REPEATS_SINCE_FAIL: 1
:DRILL_TOTAL_REPEATS: 12
:DRILL_FAILURE_COUNT: 7
:DRILL_AVERAGE_QUALITY: 2.578
:DRILL_EASE: 2.255
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2017-11-18 Sat 19:32]
:END:
Describe

**** Asynchronous

**** Short

 - at any point in time
 - not observable
 - can resume at once
 - can delegate failure

**** Long
The Oxford Dictionary defines asynchronous as “not existing or
occurring at the same time”.  In the context of this manifesto we mean
that the processing of a request occurs at an arbitrary point in time,
sometime after it has been transmitted from client to service.  The
client cannot directly observe, or synchronize with, the execution
that occurs within the service.  This is the antonym of synchronous
processing which implies that the client only resumes its own
execution once the service has processed the request.

*** Reactive glossary                                               :drill:
SCHEDULED: <2017-11-27 Mon>
:PROPERTIES:
:ID:       cc9ec132-9a41-4dd6-aff6-d60fa239e5c6
:DRILL_LAST_INTERVAL: 18.0697
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 11
:DRILL_FAILURE_COUNT: 5
:DRILL_AVERAGE_QUALITY: 2.545
:DRILL_EASE: 2.239
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2017-11-09 Thu 22:01]
:END:
Describe

**** Back-Pressure

**** Short

 - unacceptable for component under stress to fail (totally)
   - drop messages
   - uncontrolled failure
 - component communicates its problems
 - reduction of workload
 - system reacts as whole

**** Long

When one component is struggling to keep-up, the system as a whole
needs to respond in a sensible way. It is unacceptable for the
component under stress to fail catastrophically or to drop messages in
an uncontrolled fashion.  Since it can’t cope and it can’t fail it
should communicate the fact that it is under stress to upstream
components and so get them to reduce the load.  This back-pressure is
an important feedback mechanism that allows systems to gracefully
respond to load rather than collapse under it.  The back-pressure may
cascade all the way up to the user, at which point responsiveness may
degrade, but this mechanism will ensure that the system is resilient
under load, and will provide information that may allow the system
itself to apply other resources to help distribute the load, see
Elasticity.

*** Reactive glossary                                               :drill:
SCHEDULED: <2017-11-27 Mon>
:PROPERTIES:
:ID:       07b9a567-7db7-427f-87d1-cea6cdaeb7de
:DRILL_LAST_INTERVAL: 24.3151
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.0
:DRILL_EASE: 2.456
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2017-11-03 Fri 13:32]
:END:
Describe

**** Batching

**** Short

 - same task executed in group
 - to use cache
 - same with external resources
   - think multi-commit in SQL
   - multiple data items into same packet/request

**** Long

Current computers are optimized for the repeated execution of the same
task: instruction caches and branch prediction increase the number of
instructions that can be processed per second while keeping the clock
frequency unchanged.  This means that giving different tasks to the
same CPU core in rapid succession will not benefit from the full
performance that could otherwise be achieved: if possible we should
structure the program such that its execution alternates less
frequently between different tasks.  This can mean processing a set of
data elements in batches, or it can mean performing different
processing steps on dedicated hardware threads.

The same reasoning applies to the use of external resources that need
synchronization and coordination.  The I/O bandwidth offered by
persistent storage devices can improve dramatically when issuing
commands from a single thread (and thereby CPU core) instead of
contending for bandwidth from all cores.  Using a single entry point
has the added advantage that operations can be reordered to better
suit the optimal access patterns of the device (current storage
devices perform better for linear than random access).

Additionally, batching provides the opportunity to share out the cost
of expensive operations such as I/O or expensive computations.  For
example, packing multiple data items into the same network packet or
disk block to increase efficiency and reduce utilization.

*** Reactive glossary                                               :drill:
SCHEDULED: <2017-12-01 Fri>
:PROPERTIES:
:ID:       f2bf48ed-4372-42a9-8eed-987c4e188c4f
:DRILL_LAST_INTERVAL: 23.6858
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 2.667
:DRILL_EASE: 2.299
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2017-11-07 Tue 13:18]
:END:
Describe

**** Failure
In contrast to Error

**** Short

   - unexpected
   - may prevent response
   - error ->
     - bad input upon validation
     - respond to client
     - know how to handle
   - failure ->
     - can't handle
     - hardware malfunction
     - out of resources
     - corrupted state

**** Long

A failure is an unexpected event within a service that prevents it
from continuing to function normally.  A failure will generally prevent
responses to the current, and possibly all following, client
requests.  This is in contrast with an error, which is an expected and
coded-for condition—for example an error discovered during input
validation, that will be communicated to the client as part of the
normal processing of the message.  Failures are unexpected and will
require intervention before the system can resume at the same level of
operation.  This does not mean that failures are always fatal, rather
that some capacity of the system will be reduced following a
failure.  Errors are an expected part of normal operations, are dealt
with immediately and the system will continue to operate at the same
capacity following an error.

Examples of failures are hardware malfunction, processes terminating
due to fatal resource exhaustion, program defects that result in
corrupted internal state.


*** Reactive glossary                                               :drill:
SCHEDULED: <2017-11-27 Mon>
:PROPERTIES:
:ID:       29b29221-63e1-4d97-aea4-dc0bb8a30916
:DRILL_LAST_INTERVAL: 24.0994
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 2.667
:DRILL_EASE: 2.299
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2017-11-03 Fri 13:35]
:END:
Describe

**** Message-Driven
In contrast to Event-Driven

**** Short

 - event -> signal emitted upon reaching given state
 - message -> data sent to destination
 - rather than focused on source, concentrate on recipient
   - that's where the logic is
 - ? resilience ?

**** Long

A message is an item of data that is sent to a specific
destination. An event is a signal emitted by a component upon reaching
a given state.  In a message-driven system addressable recipients
await the arrival of messages and react to them, otherwise lying
dormant.  In an event-driven system notification listeners are
attached to the sources of events such that they are invoked when the
event is emitted.  This means that an event-driven system focuses on
addressable event sources while a message-driven system concentrates
on addressable recipients.  A message can contain an encoded event as
its payload.

Resilience is more difficult to achieve in an event-driven system due
to the short-lived nature of event consumption chains: when processing
is set in motion and listeners are attached in order to react to and
transform the result, these listeners typically handle success or
failure directly and in the sense of reporting back to the original
client.  Responding to the failure of a component in order to restore
its proper function, on the other hand, requires a treatment of these
failures that is not tied to ephemeral client requests, but that
responds to the overall component health state.

** eXtreme Programming

*** XP Values                                                       :drill:
SCHEDULED: <2017-12-07 Thu>
:PROPERTIES:
:ID:       b82e1b84-c553-41fa-9e73-14edfd222b70
:DRILL_LAST_INTERVAL: 27.7516
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 12
:DRILL_FAILURE_COUNT: 7
:DRILL_AVERAGE_QUALITY: 2.583
:DRILL_EASE: 2.257
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2017-11-09 Thu 22:01]
:END:
List all

**** Values
 - Communication
 - Simplicity
 - Feedback
 - Courage
 - Respect

#  LocalWords:  twosided cda bc bd
* COMMENT _ local vars

# Local Variables:
# org-drill-maximum-items-per-session:    30
# org-drill-spaced-repetition-algorithm:  simple8
# org-drill-learn-fraction: 0.23
# org-drill-add-random-noise-to-intervals-p: t
# End:

