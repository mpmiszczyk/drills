* inbox
** TODO drill law of Andala
  [2017-10-04 Wed]
low of demishing returns
** TODO drill Alan Kay quote about OOP and messages
  [2017-10-13 Fri]
  [[file:~/Dropbox/org/praca.org::*%5B%5Bhttps://media.pragprog.com/titles/pb7con/Bonus_Chapter.pdf%5D%5B7%20in%207%5D%5D%20bonus%20on%20actors][7 in 7 bonus on actors]]

* craft drill                                                         :craft:
:LOGBOOK:
CLOCK: [2017-11-04 Sat 20:49]--[2017-11-04 Sat 21:38] =>  0:49
CLOCK: [2017-11-04 Sat 20:20]--[2017-11-04 Sat 20:45] =>  0:25
CLOCK: [2017-11-04 Sat 19:50]--[2017-11-04 Sat 20:15] =>  0:25
CLOCK: [2017-11-04 Sat 19:18]--[2017-11-04 Sat 19:43] =>  0:25
CLOCK: [2017-11-03 Fri 13:30]--[2017-11-03 Fri 13:55] =>  0:25
CLOCK: [2017-10-29 Sun 21:58]--[2017-10-29 Sun 22:23] =>  0:25
CLOCK: [2017-10-25 Wed 11:00]--[2017-10-25 Wed 11:25] =>  0:25
CLOCK: [2017-10-21 Sat 13:03]--[2017-10-21 Sat 13:10] =>  0:07
CLOCK: [2017-10-19 Thu 15:57]--[2017-10-19 Thu 16:00] =>  0:03
CLOCK: [2017-10-16 Mon 10:26]--[2017-10-16 Mon 10:45] =>  0:19
CLOCK: [2017-10-13 Fri 10:56]--[2017-10-13 Fri 11:20] =>  0:24
CLOCK: [2017-10-12 Thu 19:26]--[2017-10-12 Thu 19:32] =>  0:06
CLOCK: [2017-10-08 Sun 12:27]--[2017-10-08 Sun 12:35] =>  0:08
CLOCK: [2017-10-04 Wed 13:21]--[2017-10-04 Wed 22:00] =>  8:39
CLOCK: [2017-10-04 Wed 12:34]--[2017-10-04 Wed 13:04] =>  0:30
:END:
** Agile Manifesto

While there is value in the items on the right, we value the items on
the left more.

*** Agile Manifesto                                                 :drill:
SCHEDULED: <2017-12-03 Sun>
:PROPERTIES:
:ID:       8cb9208f-4866-4841-bcf3-324dcf92e6d9
:DRILL_CARD_TYPE: twosided
:DRILL_LAST_INTERVAL: 29.5775
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 8
:DRILL_FAILURE_COUNT: 4
:DRILL_AV.RA....UA..TY: 2.333
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 3.204
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2017-11-03 Fri 13:35]
:END:

**** __
*Individuals and interactions*

**** over
processes and tools.

**** craftsmanship
Not only *individuals and interactions* but also *community of
professionals*

*** Agile Manifesto                                                 :drill:
SCHEDULED: <2017-11-10 Fri>
:PROPERTIES:
:ID:       a5591094-bfe7-49e4-9e42-20570eaac95d
:DRILL_CARD_TYPE: twosided
:DRILL_LAST_INTERVAL: 25.0
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 3
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.5
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2017-10-16 Mon 10:27]
:END:
**** __
*Working software*
**** over
comprehensive documentation

**** craftsmanship
Not only *working software* but also *well crafted software*

*** Agile Manifesto                                                 :drill:
SCHEDULED: <2017-11-09 Thu>
:PROPERTIES:
:ID:       eaa49b90-10b4-4e95-9baa-016510227096
:DRILL_CARD_TYPE: twosided
:DRILL_LAST_INTERVAL: 20.7426
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 3.0
:DRILL_EASE: 2.22
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2017-10-19 Thu 15:58]
:END:

**** __
*Customer collaboration*

**** over
contract negotiation

**** craftsmanship
Not only *customer collaboration* but also *productive partnership*

*** Agile Manifesto                                                 :drill:
SCHEDULED: <2017-11-10 Fri>
:PROPERTIES:
:ID:       56fa1473-1496-4d48-8fcd-16a2b715d9dc
:DRILL_CARD_TYPE: twosided
:DRILL_LAST_INTERVAL: 25.0
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 3.5
:DRILL_EASE: 2.5
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2017-10-16 Mon 10:27]
:END:

**** __
*Responding to change*

**** over
following a plan

**** craftsmanship
Not only *responding to change* but also *steadily adding value*
*** Agile Manifesto                                                 :drill:
:PROPERTIES:
:ID:       8a9d1627-0e5a-4c10-a66e-d49bda444254
:DRILL_LAST_INTERVAL: 0.0
:DRILL_REPEATS_SINCE_FAIL: 1
:DRILL_TOTAL_REPEATS: 1
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 2.0
:DRILL_EASE: 2.5
:DRILL_LAST_QUALITY: 2
:DRILL_LAST_REVIEWED: [2017-10-12 Thu 19:36]
:END:
**** List all four
- *Individuals and interactions* over *processes and tools*
- *Working software* over *comprehensive documentation*.
- *Customer collaboration* over *contract negotiation*.
- *Responding to change* over *following a plan*.
** Software Craftsmanship

*** Software Craftsmanship Manifesto                                :drill:
SCHEDULED: <2017-11-29 Wed>
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:DRILL_LAST_INTERVAL: 25.5907
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.5
:DRILL_EASE: 2.73
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2017-11-03 Fri 13:31]
:ID:       c251bf80-cda1-4c13-9b5a-9cc3b1b88c9d
:END:

**** Not only
working software

**** but also
well crafted software

**** from agile
Working Software over comprehensive documentation

*** Software Craftsmanship Manifesto                                :drill:
SCHEDULED: <2017-11-29 Wed>
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:ID:       265df42b-a815-4bc9-8ca6-1b8c6a8bd966
:DRILL_LAST_INTERVAL: 25.5907
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.5
:DRILL_EASE: 2.73
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2017-11-03 Fri 13:33]
:END:

**** Not only
responding to change

**** but also
steadily adding value

**** from agile
Responding to change over following a plan

*** Software Craftsmanship Manifesto                                :drill:
SCHEDULED: <2017-11-27 Mon>
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:ID:       10baea12-fc98-429b-9ee7-9c435c4146a7
:DRILL_LAST_INTERVAL: 24.486
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.25
:DRILL_EASE: 2.58
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2017-11-03 Fri 13:36]
:END:

**** Not only
individuals and interactions

**** but also
a community of professionals

**** from agile
Individuals and interactions over processes and tools

*** Software Craftsmanship Manifesto                                :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twoside
:ID:       fbb027b5-d1cd-465f-bdad-8da38acbded5
:END:

**** Not only
customer collaboration

**** but also
productive partnerships

**** from agile
Customer collaboration over contract renegotiation

*** Software Craftsmanship Manifesto                                :drill:
:PROPERTIES:
:ID:       df890367-d8ce-4cef-999b-f65458a0ca03
:DRILL_LAST_INTERVAL: 3.86
:DRILL_REPEATS_SINCE_FAIL: 2
:DRILL_TOTAL_REPEATS: 2
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 2.5
:DRILL_EASE: 2.36
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2017-10-08 Sun 13:01]
:END:

**** List all four
- Not only *working software* but also *well crafted software*.
- Not only *responding to change* but also *steadily adding value*.
- Not only *individuals and interactions* but also *community of profesionals*.
- Not only *customer collaboration* but also *productive partnerships*.
** Reactive

*** Reactive Manifesto                                              :drill:
SCHEDULED: <2017-12-01 Fri>
:PROPERTIES:
:ID:       e7135911-f6b1-4fa2-b1eb-6ca9f25d1061
:DRILL_LAST_INTERVAL: 27.7663
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 3.0
:DRILL_EASE: 2.456
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2017-11-03 Fri 13:33]
:END:
Reactive systems are

**** List all goals

 - responsive
 - resilient
 - elastic
 - message driven

**** Diagram


#+BEGIN_EXPORT ascii
                        +----------------+
               +------->|  Responsive    |<------+
               |        +----------------+       |
               |                ^                |
               |                |                |
               |                |                |
       +----------------+       |        +----------------+
       |  Elastic       |<------+------->| Resilient      |
       +----------------+       |        +-------+--------+
               ^                |                ^
               |                |                |
               |        +----------------+       |
               +--------| Message Driven |-------+
                        +----------------+
#+END_EXPORT





*** Reactive Manifesto                                              :drill:
SCHEDULED: <2017-11-05 Sun>
:PROPERTIES:
:ID:       de26c209-ea03-4fcf-a905-7c936d3939de
:DRILL_LAST_INTERVAL: 6.7048
:DRILL_REPEATS_SINCE_FAIL: 3
:DRILL_TOTAL_REPEATS: 12
:DRILL_FAILURE_COUNT: 6
:DRILL_AVERAGE_QUALITY: 2.417
:DRILL_EASE: 1.66
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2017-10-29 Sun 21:58]
:END:
Reactive systems are

**** List all benefits

 - flexible
 - loosely-coupled
 - scalable
 - fault-tolerant

*** Reactive Manifesto                                              :drill:
SCHEDULED: <2017-11-05 Sun>
:PROPERTIES:
:ID:       50d0c2db-4ef0-41d3-9e04-6bc687bb8278
:DRILL_LAST_INTERVAL: 14.9359
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 7
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 2.715
:DRILL_EASE: 1.8
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2017-10-21 Sat 13:05]
:END:
Describe

**** Responsive

**** Short

   - respond fast
   - feature -> usability
   - problems detected quickly

**** Long

The system responds in a timely manner if at all possible.
Responsiveness is the cornerstone of usability and utility, but more
than that, responsiveness means that problems may be detected quickly
and dealt with effectively.  Responsive systems focus on providing
rapid and consistent response times, establishing reliable upper
bounds so they deliver a consistent quality of service.  This
consistent behaviour in turn simplifies error handling, builds end
user confidence, and encourages further interaction.

*** Reactive Manifesto                                              :drill:
SCHEDULED: <2017-11-07 Tue>
:PROPERTIES:
:ID:       a261e838-15df-4648-b788-16fa0bc007cd
:DRILL_LAST_INTERVAL: 2.9086
:DRILL_REPEATS_SINCE_FAIL: 2
:DRILL_TOTAL_REPEATS: 19
:DRILL_FAILURE_COUNT: 11
:DRILL_AVERAGE_QUALITY: 2.453
:DRILL_EASE: 2.191
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2017-11-04 Sat 10:43]
:END:
Describe

**** Resilient

**** Short

 - stays responsive in the face of failure
 - *client* not burdened with handling a failure
 - achieved by
   * *replication*
   * isolation
   * delegation

**** Long
The system stays responsive in the face of failure.  This applies not
only to highly-available, mission critical systems — any system that
is not resilient will be unresponsive after a failure.  Resilience is
achieved by replication, containment, isolation and
delegation. Failures are contained within each component, isolating
components from each other and thereby ensuring that parts of the
system can fail and recover without compromising the system as a
whole.  Recovery of each component is delegated to another (external)
component and high-availability is ensured by replication where
necessary.  The client of a component is not burdened with handling
its failures.

*** Reactive Manifesto                                              :drill:
SCHEDULED: <2017-11-26 Sun>
:PROPERTIES:
:ID:       21e2503a-b163-468f-a4c0-630befdf4376
:DRILL_LAST_INTERVAL: 23.4451
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 12
:DRILL_FAILURE_COUNT: 7
:DRILL_AVERAGE_QUALITY: 2.583
:DRILL_EASE: 2.257
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2017-11-03 Fri 13:36]
:END:
Describe

**** Elastic

**** Short

 - responsive under varying workload
 - react to change
 - *no bottlenecks*
 - *live performance measures*

**** Long
The system stays responsive under varying workload.  Reactive Systems
can react to changes in the input rate by increasing or decreasing the
resources allocated to service these inputs.  This implies designs that
have no contention points or central bottlenecks, resulting in the
ability to shard or replicate components and distribute inputs among
them.  Reactive Systems support predictive, as well as Reactive,
scaling algorithms by providing relevant live performance
measures.  They achieve elasticity in a cost-effective way on commodity
hardware and software platforms.

*** Reactive Manifesto                                              :drill:leech:
:PROPERTIES:
:ID:       cd262b40-dc14-4613-a179-0b8411602103
:DRILL_LAST_INTERVAL: 0.0
:DRILL_REPEATS_SINCE_FAIL: 0
:DRILL_TOTAL_REPEATS: 21
:DRILL_FAILURE_COUNT: 16
:DRILL_AVERAGE_QUALITY: 2.33
:DRILL_EASE: 2.125
:DRILL_LAST_QUALITY: 2
:DRILL_LAST_REVIEWED: [2017-11-04 Sat 10:44]
:END:
Describe

**** Message Driven proprieties

**** Short

 - asynchronous
 - loose coupling
 - isolation
 - location transparency
 - delegation of failure
 - back-pressure

**** Long
Reactive Systems rely on asynchronous message-passing to establish a
boundary between components that ensures loose coupling, isolation and
location transparency.  This boundary also provides the means to
delegate failures as messages.  Employing explicit message-passing
enables load management, elasticity, and flow control by shaping and
monitoring the message queues in the system and applying back-pressure
when necessary.  Location transparent messaging as a means of
communication makes it possible for the management of failure to work
with the same constructs and semantics across a cluster or within a
single host.  Non-blocking communication allows recipients to only
consume resources while active, leading to less system overhead.

*** Reactive glossary                                               :drill:
SCHEDULED: <2017-11-05 Sun>
:PROPERTIES:
:ID:       068cab71-1c18-4648-8b3a-0a50dcab719a
:DRILL_LAST_INTERVAL: 2.2172
:DRILL_REPEATS_SINCE_FAIL: 1
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 2.722
:DRILL_EASE: 2.325
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2017-11-03 Fri 13:38]
:END:
Describe

**** Asynchronous

**** Short

 - at any point in time
 - not observable
 - can resume at once
 - can delegate failure

**** Long
The Oxford Dictionary defines asynchronous as “not existing or
occurring at the same time”.  In the context of this manifesto we mean
that the processing of a request occurs at an arbitrary point in time,
sometime after it has been transmitted from client to service.  The
client cannot directly observe, or synchronize with, the execution
that occurs within the service.  This is the antonym of synchronous
processing which implies that the client only resumes its own
execution once the service has processed the request.

*** Reactive glossary                                               :drill:
SCHEDULED: <2017-11-09 Thu>
:PROPERTIES:
:ID:       cc9ec132-9a41-4dd6-aff6-d60fa239e5c6
:DRILL_LAST_INTERVAL: 14.9359
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 10
:DRILL_FAILURE_COUNT: 5
:DRILL_AVERAGE_QUALITY: 2.5
:DRILL_EASE: 1.8
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2017-10-25 Wed 11:01]
:END:
Describe

**** Back-Pressure

**** Short

 - unacceptable for component under stress to fail (totally)
   - drop messages
   - uncontrolled failure
 - component communicates its problems
 - reduction of workload
 - system reacts as whole

**** Long

When one component is struggling to keep-up, the system as a whole
needs to respond in a sensible way. It is unacceptable for the
component under stress to fail catastrophically or to drop messages in
an uncontrolled fashion.  Since it can’t cope and it can’t fail it
should communicate the fact that it is under stress to upstream
components and so get them to reduce the load.  This back-pressure is
an important feedback mechanism that allows systems to gracefully
respond to load rather than collapse under it.  The back-pressure may
cascade all the way up to the user, at which point responsiveness may
degrade, but this mechanism will ensure that the system is resilient
under load, and will provide information that may allow the system
itself to apply other resources to help distribute the load, see
Elasticity.

*** Reactive glossary                                               :drill:
SCHEDULED: <2017-11-27 Mon>
:PROPERTIES:
:ID:       07b9a567-7db7-427f-87d1-cea6cdaeb7de
:DRILL_LAST_INTERVAL: 24.3151
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 4
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 3.0
:DRILL_EASE: 2.456
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2017-11-03 Fri 13:32]
:END:
Describe

**** Batching

**** Short

 - same task executed in group
 - to use cache
 - same with external resources
   - think multi-commit in SQL
   - multiple data items into same packet/request

**** Long

Current computers are optimized for the repeated execution of the same
task: instruction caches and branch prediction increase the number of
instructions that can be processed per second while keeping the clock
frequency unchanged.  This means that giving different tasks to the
same CPU core in rapid succession will not benefit from the full
performance that could otherwise be achieved: if possible we should
structure the program such that its execution alternates less
frequently between different tasks.  This can mean processing a set of
data elements in batches, or it can mean performing different
processing steps on dedicated hardware threads.

The same reasoning applies to the use of external resources that need
synchronization and coordination.  The I/O bandwidth offered by
persistent storage devices can improve dramatically when issuing
commands from a single thread (and thereby CPU core) instead of
contending for bandwidth from all cores.  Using a single entry point
has the added advantage that operations can be reordered to better
suit the optimal access patterns of the device (current storage
devices perform better for linear than random access).

Additionally, batching provides the opportunity to share out the cost
of expensive operations such as I/O or expensive computations.  For
example, packing multiple data items into the same network packet or
disk block to increase efficiency and reduce utilization.

*** Reactive glossary                                               :drill:
SCHEDULED: <2017-11-07 Tue>
:PROPERTIES:
:ID:       f2bf48ed-4372-42a9-8eed-987c4e188c4f
:DRILL_LAST_INTERVAL: 18.8265
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 5
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 2.6
:DRILL_EASE: 2.08
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2017-10-19 Thu 15:58]
:END:
Describe

**** Failure
In contrast to Error

**** Short

   - unexpected
   - may prevent response
   - error ->
     - bad input upon validation
     - respond to client
     - know how to handle
   - failure ->
     - can't handle
     - hardware malfunction
     - out of resources
     - corrupted state

**** Long

A failure is an unexpected event within a service that prevents it
from continuing to function normally.  A failure will generally prevent
responses to the current, and possibly all following, client
requests.  This is in contrast with an error, which is an expected and
coded-for condition—for example an error discovered during input
validation, that will be communicated to the client as part of the
normal processing of the message.  Failures are unexpected and will
require intervention before the system can resume at the same level of
operation.  This does not mean that failures are always fatal, rather
that some capacity of the system will be reduced following a
failure.  Errors are an expected part of normal operations, are dealt
with immediately and the system will continue to operate at the same
capacity following an error.

Examples of failures are hardware malfunction, processes terminating
due to fatal resource exhaustion, program defects that result in
corrupted internal state.


*** Reactive glossary                                               :drill:
SCHEDULED: <2017-11-27 Mon>
:PROPERTIES:
:ID:       29b29221-63e1-4d97-aea4-dc0bb8a30916
:DRILL_LAST_INTERVAL: 24.0994
:DRILL_REPEATS_SINCE_FAIL: 5
:DRILL_TOTAL_REPEATS: 6
:DRILL_FAILURE_COUNT: 2
:DRILL_AVERAGE_QUALITY: 2.667
:DRILL_EASE: 2.299
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2017-11-03 Fri 13:35]
:END:
Describe

**** Message-Driven
In contrast to Event-Driven

**** Short

 - event -> signal emitted upon reaching given state
 - message -> data sent to destination
 - rather than focused on source, concentrate on recipient
   - that's where the logic is
 - ? resilience ?

**** Long

A message is an item of data that is sent to a specific
destination. An event is a signal emitted by a component upon reaching
a given state.  In a message-driven system addressable recipients
await the arrival of messages and react to them, otherwise lying
dormant.  In an event-driven system notification listeners are
attached to the sources of events such that they are invoked when the
event is emitted.  This means that an event-driven system focuses on
addressable event sources while a message-driven system concentrates
on addressable recipients.  A message can contain an encoded event as
its payload.

Resilience is more difficult to achieve in an event-driven system due
to the short-lived nature of event consumption chains: when processing
is set in motion and listeners are attached in order to react to and
transform the result, these listeners typically handle success or
failure directly and in the sense of reporting back to the original
client.  Responding to the failure of a component in order to restore
its proper function, on the other hand, requires a treatment of these
failures that is not tied to ephemeral client requests, but that
responds to the overall component health state.

** eXtreme Programming

*** XP Values                                                       :drill:
SCHEDULED: <2017-11-09 Thu>
:PROPERTIES:
:ID:       b82e1b84-c553-41fa-9e73-14edfd222b70
:DRILL_LAST_INTERVAL: 20.7426
:DRILL_REPEATS_SINCE_FAIL: 4
:DRILL_TOTAL_REPEATS: 11
:DRILL_FAILURE_COUNT: 7
:DRILL_AVERAGE_QUALITY: 2.545
:DRILL_EASE: 2.22
:DRILL_LAST_QUALITY: 3
:DRILL_LAST_REVIEWED: [2017-10-19 Thu 15:59]
:END:
List all

**** Values
 - Communication
 - Simplicity
 - Feedback
 - Courage
 - Respect

#  LocalWords:  twosided cda bc bd
** Pragmatic Programmer
*** Tip 1                                                           :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:

**** Care
Care about your craft
**** Why
Why spend you life developing software unless you care about doing it
well?
*** Tip 2                                                           :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Provide
Provide options, don't make lame excuses
**** Instead
Instead of excuses, provide options.  Don't say it can't be done;
explain what can be done.
*** Tip 3                                                           :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Be
be a catalyst for change
**** You
You can't force change on people.  Instead, show them how the future
might be and help them participate in creating it.
*** Tip 4                                                           :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Make
Make quality a requirements issue
**** Involve
involve your users in determining the project's real quality
requirements.
*** Tip 5                                                           :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Critically
Critically analyze what you read and hear.
**** Don't
Don't be swayed by vendors, media hype, or dogma. Analyze information
in terms of you and your project.
*** Tip 6                                                           :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** DRY
Don't repeat yourself
**** Every
Every piece of knowledge must have a single, unambiguous, authoritative
representation within a system.
*** Tip 8                                                           :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Eliminate
Eliminate effects between unrelated thing
**** Design
Design components that are self-contained, independent, and have a
single, well-defined purpose.
*** Tip 9                                                           :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Use
Use tracer bullets to find the target
**** Tracer
Tracer bullets let you hoe in on your target by trying things and
seeing how close they land.
*** Tip 10                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Program
Program close to the problem domain
**** Design
Design and code in your user's language.
*** Tip 11                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Iterate
Iterate the schedule with the code.
**** Use
Use experience you gain as you implement to refine the project time
scales.
*** Tip 12                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Use
Use the power of command shells.
**** Use
Use the shell when graphical user interfaces don't cut it.
*** Tip 13                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Always
Always use source code control.
**** Source
Source code control is a time machine for your work - you can go back.
*** Tip 14                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Don't
Don't panic when debugging.
**** Take
Take a deep breath and THINK! about what could be causing the but.
*** Tip 15                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Don't
Don't assume it - prove it.
**** Prove
Prove your assumptions in the actual environment - with real data and
boundary conditions.
*** Tip 16                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Write
Write code that writes code.
**** Code
Code generators increase your productivity and help avoid duplication.
*** Tip 17                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Design
Design with contracts.
**** Use
Use contracts to document and verify that code does no more and no
less that it claims to do.
**** Notes
- /no more/ is easily achieved without side-effects
*** Tip 18                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Use
Use assertions to prevent the impossible
**** Assertions
Assertions validate your assumptions.  Use them to protect your code
from an uncertain world.
**** Notes
 - Erlang/Python happy-path
   They use 'fail fast' approach, in Erlang with use of
   pattern-matching, that works just like assertions.
*** Tip 19                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Finish
Finish what you start
**** Where
Where possible, the routine or object that allocates a resource should
be responsible for de-allocating it.
**** Notes
- ? is it just some C++ oldie ?
- ? does it apply to Erlang where creator is not a user ?
*** Tip 20                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Configure
Configure, don't integrate
**** Implement
Implement technology choices for an application as configuration
options, not through integration or engineering.
*** Tip 21                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Analyze
Analyze workflow to improve concurrency
**** Exploit
Exploit concurrency in your user's workflow
**** Notes
 - ? Should it be /asynchronity/ now?
*** Tip 22                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Always
Always design for concurrency
**** Allow
Allow for concurrent, and you'll design cleaner interfaces with fewer
assumptions.
**** Notes
 - Good point about assumptions
   Believe that program is executed synchronously in one of fallacies
   of programming.
 - ? should it be /asynchronity/ now?
*** Tip 23                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Use
Use blackboards to coordinate workflow
**** Use
Use blackboards to coordinate disparate fact and agents, while
maintaining independence and isolation among participants.
**** Notes
 - Kanban board
 - But also Wiki
*** Tip 24                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Estimate
Estimate the order of your algorithms
**** Get
Get a feel for how long things are likely to take before you write code.
*** Tip 25                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Refactor
Refactor early, refactor often
**** Just
Just as you might weed and rearrange a garden, rewrite, rework, and
re-architect code when it needs it.  Fix the root of the problem.
**** Notes
 - Have safety-net
 - Don't believe in good code
   Only in better code
*** Tip 26                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Test
Test your software, or your users will.
**** Test
Test ruthlessly.  Don't make your users find bugs for you.
*** Tip 27                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Don't
Don't gather requirements - dig for them.
**** Requirements
Requirements rarely lie on the surface.  They're buried deep beneath
layers of assumptions, misconceptions, and politics.
*** Tip 28                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Abstractions
Abstractions live longer than details.
**** Invest
Invest in the abstraction, not the implementation.  Abstractions can
survive the barrage of changes from different implementations and new
technologies.
*** Tip 29                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Don't
Don't think outside the box - find the box.
**** When
When faced with an impossible problem, identify the real constrains.
Ask yourself: "Does it have to be done this way?  Does it have to be done
at all?"
*** Tip 30                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Some
Some things are better done than described.
**** Don't
Don't fall into the specification spiral - at some point you need to
start coding.
*** Tip 31                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Costly
Costly tools don't produce better designs.
**** Beware
Beware of vendor hype, industry dogma, and the aura of the price tag.
Judge tools on their merits.
*** Tip 32                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Don't
Don't use manual procedures.
**** A shell
A shell script or batch file will execute the same instructions, in
the same order, time after time.
*** Tip 33                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Coding
Coding ain't done 'till all the the tests run.
**** 'Nuff
'Nuff said.
*** Tip 34                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Test
Test state coverage, not code coverage
**** Identify
Identify and test significant program states.  Just testing lines of
code isn't enough.
*** Tip 36                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** English
English is just a programming language
**** Write
Write documents as you would write code: honor the DRY principle, use
metadata, MVC, automatic generation, and so on.
*** Tip 37                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Gently
Gently exceed our users' expectations
**** Come
Come to understand your users' expectations, and than deliver just a
little bit more.
**** Notes
 - /understand/ is more important than /deliver/
*** Tip 38                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Think!
Think! bout your work
**** Turn
Turn off the autopilot and take control.  Constantly critique and
apprise our work.
*** Tip 39                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Don't
Don't live with broken windows.
**** Fix
Fix bad designs, wrong decisions, and poor code when you see them.
*** Tip 40                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Remember
Remember the big picture.
**** Don't
Don't get so engrossed in the details that you forget to check what's
happening around you.
*** Tip 41                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Invest
Invest regularly in your knowledge portfolio.
**** Make
Make learning a habit.
**** Notes
 - /regularly/ is the key to /compound interests/
*** Tip 42                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** It's
It's both what you say and the way you say it.
**** There's
There's no point in having great ideas if you don't communicate them
effectively.
*** Tip 43                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Make
Make it easy to reuse.
**** If
If it's easy to reuse, people will.  Create an environment that
supports reuse.
*** Tip 44                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** There
There are no final decisions.
**** No
No decision is cast in stone.  Instead, consider each as being written
in the sand at the beach, and plan for change.
*** Tip 45                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Prototype
Prototype to learn.
**** Prototyping
Prototyping is a learning experience.  Its value lies not in the code
you produce, but in the lessons you learn.
**** Notes
 - It can be applied to TDD
*** Tip 46                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Estimate
Estimate to avoid surprises.
**** Estimate
Estimate before you start.  You'll spot potential problems up from.
*** Tip 47                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Keep
Keep knowledge in plain text
**** Plain
Plain text won't become obsolete.  It helps leverage your work and
simplifies debugging and testing.
*** Tip 48                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Use
Use a single editor well.
**** The editor
The editor should be an extension of your hand; make sure your editor
is configurable, extensible and programmable.
**** Notes
 - Editor is IDE
   which stands for your whole environment
*** Tip 49                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Fix
Fix the problem, not the blame.
**** It doesn't
It doesn't really matter whether the bug your fault or someone else -
it is still your problem, and it still needs to be fixed.
*** Tip 50                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** ~select~
~select~ isn't broken.
**** It is
It is rare to find a bug in the OS or the compiler, or even a
third-party product or library.  The bug is most likely in the
application.
**** Notes
 - Bugs in third-party libraries are more common now
*** Tip 51                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Learn
Learn a text manipulation language
**** You
You spend a large part of each day working with text.  Why not have to
computer do some of it for you?
**** Notes
 - I have regexp
   But if I do, I should learn some wrapper around it, especially for
   elisp, since than it can be used almost everywhere
*** Tip 52                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** You
You Can't write perfect software
**** Software
Software cant' be perfect.  Protect your code and users from the
inevitable errors.
*** Tip 53                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Crash
Crash Early
**** A dead
A dead program normally does a lot less damage than a crippled one.
**** Notes
 - You should crash close to root cause of your problem
   Otherwise it is extremely hard to find bugs
*** Tip 54                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Use
Use exceptions for exceptional problems
**** Exceptions
Exceptions can suffer from all the readability an maintainability
problems of classic spaghetti code.  Reserve exceptions for
exceptional things.
*** Tip 55                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Minimize
Minimize coupling between modules
**** Avoid
Avoid coupling b writing /shy/ code and applying the Law of Demeter.
*** Tip 56                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Put
Put Abstractions in code, details in metadata.
**** Program
Program for the general case, and put the specifics outside the
compiled code base.
*** Tip 57                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Design
Design using services.
**** Design
Design in terms of services - independent, concurrent objects behind
well defined, consistent interfaces.
*** Tip 58                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Separate
Separate views from models.
**** Gain
Gain flexibility at low cost by designing your application in terms of
models and views.
*** Tip 59                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Don't
Don't program by coincidence.
**** Rely
Rely only on reliable things.  beware of accidental complexity, and
don't confuse a happy coincidence with a purposeful plan
*** Tip 60                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Test
Test your estimates.
**** Mathematical
Mathematical analysis of algorithms doesn't tell you everything.  Try
timing your code in real target environment.
*** Tip 61                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Design
Design to test
**** Start
Start thinking about testing before you write a line of code.
**** Notes
- /testing/ is just another word for /use/
  and ease of use in particular.
*** Tip 62                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Don't
Don't use wizard code you don't understand.
**** Wizards
Wizards can generate reams of code.  Make sure you understand all of
it before you incorporate it into your project.
**** Notes
 - not just /wizards/ but also /enterprise/
   Corporations are full of programmers that spill out factories and
   observers without understanding need for them
*** Tip 63                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Work
Work with user to think like a user.
**** It's the best
It's the best way to gain insight into how the system will really be used
**** Notes
 - and work as support for time to time
*** Tip 64                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Use
Use a project glossary.
**** Create
Create and maintain a single source of all the specific terms and
vocabulary for a project
**** Notes
 - especially for shortcuts, jargon and parts of design
*** Tip 65                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Start
Start when you're ready.
**** You've
You've been building experience all your life.  Don't ignore niggling
doubts.
*** Tip 66                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Don't
Don't be a slave to formal methods.
**** Don't
Don't blindly adopt and technique without putting it into the context
of our development practices and capabilities.
*** Tip 67                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Organize
Organize teams around functionality.
**** Don't
Don't separate designers from coders, testers from data modelers.
Build teams the way you build code.
*** Tip 68                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Test
Test early.  Test often.  Test automatically.
**** Test
Test that run with every build are much more effective than test plans
that sit on a shelf.
*** Tip 69                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Use
Use saboteurs to test or testing.
**** Introduce
Introduce bugs on purpose in source to verify that
testing will catch them.
*** Tip 70                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Find
Find bugs once.
**** Once
Once a human tester finds a bug, it should be the last time a human
tester finds that bug.  Automatic tests should check for it from then
on.
*** Tip 71                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Build
Build documentation in, don't bolt it on.
**** Documentation
Documentation created separately form code is less likely to be
correct and up to date.
*** Tip 71                                                          :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Sing
Sing your work
**** Craftsman
Craftsman of an earlier age were proud to sign their work.  You should
be too.
* _ local vars

# Local Variables:
# org-drill-maximum-items-per-session:    50
# org-drill-spaced-repetition-algorithm:  simple8
# org-drill-learn-fraction: 0.23
# End:
