* Design Patterns
Based on https://sourcemaking.com/design_patterns

** Gang Of Four
*** Design Pattern                                                  :drill:
:PROPERTIES:
:ID:       964ea352-772c-4967-ba0e-58ab8eb5c692
:END:
**** *Chain of Responsibility*
Avoid coupling the _sender_ of a request to its _receiver_ by giving more
than one object a chance to handle the request. Chain the receiving
objects and pass the request along the chain until an object handles
it.

Launch-and-leave requests with a single processing pipeline that
contains many possible handlers.

An object-oriented linked list with recursive traversal.

**** Check list
 - The base class maintains a "next" pointer.
 - Each derived class implements its contribution for handling the
   request.
 - If the request needs to be "passed on", then the derived class
   "calls back" to the base class, which delegates to the "next"
   pointer.
 - The client (or some third party) creates and links the chain (which
   may include a link from the last node to the root node).
 - The client "launches and leaves" each request with the root of the
   chain.
 - Recursive delegation produces the illusion of magic.

**** Problem
There is a potentially variable number of "handler" or "processing
element" or "node" objects, and a stream of requests that must be
handled. Need to efficiently process the requests without hard-wiring
handler relationships and precedence, or request-to-handler mappings.
**** Norvig
**** Similar
- Command (can be used with)
- Mediator (decoupling sender and receiver)
- Composit (Chain ackt like requests - it's parts)
- Observer 
**** Notes
Somewaht similar to fold on method?
Or to event?

**** Code
#+BEGIN_SRC python
  """
  Avoid coupling the sender of a request to its receiver by giving
  more than one object a chance to handle the request. Chain the receiving
  objects and pass the request along the chain until an object handles it.
  """

  import abc


  class Handler(metaclass=abc.ABCMeta):
      """
      Define an interface for handling requests.
      Implement the successor link.
      """

      def __init__(self, successor=None):
          self._successor = successor

      @abc.abstractmethod
      def handle_request(self):
          pass


  class ConcreteHandler1(Handler):
      """
      Handle request, otherwise forward it to the successor.
      """

      def handle_request(self):
          if True:  # if can_handle:
              pass
          elif self._successor is not None:
              self._successor.handle_request()


  class ConcreteHandler2(Handler):
      """
      Handle request, otherwise forward it to the successor.
      """

      def handle_request(self):
          if False:  # if can_handle:
              pass
          elif self._successor is not None:
              self._successor.handle_request()


  def main():
      concrete_handler_1 = ConcreteHandler1()
      concrete_handler_2 = ConcreteHandler2(concrete_handler_1)
      concrete_handler_2.handle_request()


  if __name__ == "__main__":
      main()
#+END_SRC

*** Design Pattern                                                  :drill:
:PROPERTIES:
:ID:       0990162c-c03b-48c3-913d-ebff640a7832
:END:
**** *Decorator*
 - Attach additional responsibilities to an object
   dynamically. Decorators provide a flexible alternative to
   subclassing for extending functionality.
 - Client-specified embellishment of a core object by recursively
   wrapping it.
 - Wrapping a gift, putting it in a box, and wrapping the box.

**** Check List
 - Ensure the context is: a single core (or non-optional) component,
   several optional embellishments or wrappers, and an interface that
   is common to all.
 - Create a "Lowest Common Denominator" interface that makes all
   classes interchangeable.
 - Create a second level base class (Decorator) to support the
   optional wrapper classes.
 - The Core class and Decorator class inherit from the LCD interface.
 - The Decorator class declares a composition relationship to the LCD
   interface, and this data member is initialized in its constructor.
 - The Decorator class delegates to the LCD object.
 - Define a Decorator derived class for each optional embellishment.
 - Decorator derived classes implement their wrapper functionality -
   and - delegate to the Decorator base class.
 - The client configures the type and ordering of Core and Decorator
   objects.
**** Problem
You want to add behavior or state to individual objects at
run-time. Inheritance is not feasible because it is static and applies
to an entire class.
**** Norvig
**** Similar
 - Proxy
 - Composite
 - Strategy
 - Chain of resposibility
**** Notes
**** Code
#+BEGIN_SRC python

  """
  Attach additional responsibilities to an object dynamically. Decorators
  provide a flexible alternative to subclassing for extending
  functionality.
  """

  import abc


  class Component(metaclass=abc.ABCMeta):
      """
      Define the interface for objects that can have responsibilities
      added to them dynamically.
      """

      @abc.abstractmethod
      def operation(self):
          pass


  class Decorator(Component, metaclass=abc.ABCMeta):
      """
      Maintain a reference to a Component object and define an interface
      that conforms to Component's interface.
      """

      def __init__(self, component):
          self._component = component

      @abc.abstractmethod
      def operation(self):
          pass


  class ConcreteDecoratorA(Decorator):
      """
      Add responsibilities to the component.
      """

      def operation(self):
          # ...
          self._component.operation()
          # ...


  class ConcreteDecoratorB(Decorator):
      """
      Add responsibilities to the component.
      """

      def operation(self):
          # ...
          self._component.operation()
          # ...


  class ConcreteComponent(Component):
      """
      Define an object to which additional responsibilities can be
      attached.
      """

      def operation(self):
          pass


  def main():
      concrete_component = ConcreteComponent()
      concrete_decorator_a = ConcreteDecoratorA(concrete_component)
      concrete_decorator_b = ConcreteDecoratorB(concrete_decorator_a)
      concrete_decorator_b.operation()


  if __name__ == "__main__":
      main()
#+END_SRC
*** Design Pattern                                                  :drill:
:PROPERTIES:
:DRILL_LAST_INTERVAL: 0.0
:DRILL_REPEATS_SINCE_FAIL: 0
:DRILL_TOTAL_REPEATS: 0
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 1.0
:DRILL_EASE: 1.272
:DRILL_LAST_QUALITY: 1
:DRILL_LAST_REVIEWED: [2018-01-02 Tue 23:48]
:ID:       fe4860cb-0803-4f18-98f5-a68f1b41e762
:END:
**** *Strategy*
Basic use of inheritance -> Open Closed Principle -> Open for extension
closed for modification

Capture the abstraction in an interface, bury implementation details
in derived classes.

**** Check List
 - Identify an algorithm (i.e. a behavior) that the client would
   prefer to access through a "flex point".
 - Specify the signature for that algorithm in an interface.
 - Bury the alternative implementation details in derived classes.
 - Clients of the algorithm couple themselves to the interface.
   
**** Problem
To minimize coupling and allow extensibility you should program for
general case (abstraction) and leave implementation to someone
(something) else
**** Norvig
**** Similar
**** Notes
**** Code
#+BEGIN_SRC python
  """
  Define a family of algorithms, encapsulate each one, and make them
  interchangeable. Strategy lets the algorithm vary independently from
  clients that use it.
  """

  import abc


  class Context:
      """
      Define the interface of interest to clients.
      Maintain a reference to a Strategy object.
      """

      def __init__(self, strategy):
          self._strategy = strategy

      def context_interface(self):
          self._strategy.algorithm_interface()


  class Strategy(metaclass=abc.ABCMeta):
      """
      Declare an interface common to all supported algorithms. Context
      uses this interface to call the algorithm defined by a
      ConcreteStrategy.
      """

      @abc.abstractmethod
      def algorithm_interface(self):
          pass


  class ConcreteStrategyA(Strategy):
      """
      Implement the algorithm using the Strategy interface.
      """

      def algorithm_interface(self):
          pass


  class ConcreteStrategyB(Strategy):
      """
      Implement the algorithm using the Strategy interface.
      """

      def algorithm_interface(self):
          pass


  def main():
      concrete_strategy_a = ConcreteStrategyA()
      context = Context(concrete_strategy_a)
      context.context_interface()


  if __name__ == "__main__":
      main()
#+END_SRC
*** Design Pattern                                                  :drill:
:PROPERTIES:
:DRILL_LAST_INTERVAL: 0.0
:DRILL_REPEATS_SINCE_FAIL: 0
:DRILL_TOTAL_REPEATS: 0
:DRILL_FAILURE_COUNT: 1
:DRILL_AVERAGE_QUALITY: 1.0
:DRILL_EASE: 1.272
:DRILL_LAST_QUALITY: 1
:DRILL_LAST_REVIEWED: [2018-01-03 Wed 21:50]
:END:
**** *Interpreter*
Map create language for domain.  Than you can solve domain problems
more easily with this DSL abstraction.

Main issue is being able to compose freely those "language objects".

An abstract base class specifies the method ~interpret()~. Each concrete
subclass implements ~interpret()~ by accepting (as an argument) the
current state of the language stream, and adding its contribution to
the problem solving process.

**** Check List
 - Decide if a "little language" offers a justifiable return on
   investment.
 - Define a grammar for the language.
 - Map each production in the grammar to a class.
 - Organize the suite of classes into the structure of the Composite
   pattern.
 - Define an interpret(Context) method in the Composite hierarchy.
 - The Context object encapsulates the current state of the input and
   output as the former is parsed and the latter is accumulated. It is
   manipulated by each grammar class as the "interpreting" process
   transforms the input into the output.
**** Intent
- Given a language, define a representation for its grammar along with
  an interpreter that uses the representation to interpret sentences
  in the language.
- Map a domain to a language, the language to a grammar, and the
  grammar to a hierarchical object-oriented design.
**** Problem
A class of problems occurs repeatedly in a well-defined and
well-understood domain. If the domain were characterized with a
"language", then problems could be easily solved with an
interpretation "engine".

**** Rules of thumb
 - Considered in its most general form (i.e. an operation distributed
   over a class hierarchy based on the /Composite/ pattern), nearly
   every use of the Composite pattern will also contain the
   /Interpreter/ pattern. But the Interpreter pattern should be reserved
   for those cases in which you want to think of this class hierarchy
   as defining a language.
 - Interpreter can use /State/ to define parsing contexts.
 - The abstract syntax tree of Interpreter is a Composite (therefore
   /Iterator/ and /Visitor/ are also applicable).
 - Terminal symbols within Interpreter's abstract syntax tree can be
   shared with /Flyweight/.
 - The pattern doesn't address parsing. When the grammar is very
   complex, other techniques (such as a parser) are more appropriate.

**** Norvig
**** Notes
**** Code
#+BEGIN_SRC python
  """
  Define a represention for a grammar of the given language along with an
  interpreter that uses the representation to interpret sentences in the
  language.
  """

  import abc


  class AbstractExpression(metaclass=abc.ABCMeta):
      """
      Declare an abstract Interpret operation that is common to all nodes
      in the abstract syntax tree.
      """

      @abc.abstractmethod
      def interpret(self):
          pass


  class NonterminalExpression(AbstractExpression):
      """
      Implement an Interpret operation for nonterminal symbols in the grammar.
      """

      def __init__(self, expression):
          self._expression = expression

      def interpret(self):
          self._expression.interpret()


  class TerminalExpression(AbstractExpression):
      """
      Implement an Interpret operation associated with terminal symbols in
      the grammar.
      """

      def interpret(self):
          pass


  def main():
      abstract_syntax_tree = NonterminalExpression(TerminalExpression())
      abstract_syntax_tree.interpret()


  if __name__ == "__main__":
      main()
#+END_SRC
* Design Antippaters
from
https://sourcemaking.com/antipatterns/software-project-management-antipatterns
* COMMENT _ local vars

# Local Variables:
# org-drill-maximum-items-per-session:    30
# org-drill-spaced-repetition-algorithm:  simple8
# org-drill-learn-fraction: 0.23
# org-drill-add-random-noise-to-intervals-p: t
# End:

